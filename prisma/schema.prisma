// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
}

model Whitelist {
  id     Int      @id @default(autoincrement())
  userId Int      @unique
}

// schema.prisma

model Designation {
  id        Int      @id @default(autoincrement())
  name      String
  employees EmployeePosition[] @relation("EmployeeDesignation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Location {
  id        Int      @id @default(autoincrement())
  name      String
  employees EmployeePosition[] @relation("EmployeeLocation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Department {
  id        Int      @id @default(autoincrement())
  name      String
  employees EmployeePosition[] @relation("EmployeeDepartment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Division {
  id        Int      @id @default(autoincrement())
  name      String
  employees EmployeePosition[] @relation("EmployeeDivision")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model ReportingManager {
  id        Int      @id @default(autoincrement())
  name      String
  employees EmployeeBasicInfo[] @relation("EmployeeReportingManager")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  employees   EmployeePosition[] @relation("EmployeeProject")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model EmployeeBasicInfo {
  id                  Int      @id @default(autoincrement())

  empNo               String @unique

  probationPeriod     String
  confirmDate         String?
  fname               String
  lname               String
  email               String
  dob                 String?
  mobileNo            String
  aadharNo            String
  emergencyName       String
  gender              String
  emergencyNo         String
  reportingMg         ReportingManager? @relation("EmployeeReportingManager", fields: [reportingMgId], references: [id])
  reportingMgId       Int?
  fathersName         String?
  status              String
  spouseName          String?
  doj                 String?


  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model EmployeePosition {
  id                  Int      @id @default(autoincrement())
  empNo               String  @unique

  grade               String
  costCenter          String
  designation         Designation? @relation("EmployeeDesignation", fields: [designationId], references: [id])
  designationId       Int?
  location            Location?   @relation("EmployeeLocation", fields: [locationId], references: [id])
  locationId          Int?
  division            Division?   @relation("EmployeeDivision", fields: [divisionId], references: [id])
  divisionId          Int?
  department          Department? @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  departmentId        Int?
  shift               String
  project             Project?    @relation("EmployeeProject", fields: [projectId], references: [id])
  projectId           Int?
  projectDate         String?


  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model EmployeeStatutory {
  id                  Int      @id @default(autoincrement())
  empNo               String   @unique

  panNo               String
  aadharNo            String
  passportNo          String
  uanNo               String

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
model EmployeePayment {
  id                  Int      @id @default(autoincrement())
  empNo               String    @unique

  paymentType               String
  bankName                 String
  accountNumber             String
  accHolderName             String
  ifscCode                 String
  branchName                String  

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}



